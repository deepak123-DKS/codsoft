import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Sample data: User ratings for movies
data = {
    'User': ['Deepak', 'Ashish', 'Kartikesh', 'Prabhanjan', 'Arpit', 'Harsh', 'Abhimanyu', 'Archi', 'Khushi', 'Chandan'],
    'Baaghi 1': [5, 4, 0, 0, 2, 3, 1, 4, 2, 0],
    'Sector 2': [3, 0, 0, 5, 4, 2, 3, 0, 1, 4],
    'Kick 3': [0, 0, 4, 4, 0, 1, 2, 3, 0, 5],
    'Pathan 4': [2, 5, 0, 0, 3, 0, 4, 2, 5, 1],
    'Jawan 5': [0, 0, 5, 3, 0, 4, 1, 0, 3, 2],
    'Pinklip 6': [4, 2, 0, 1, 5, 3, 0, 1, 4, 0],
    'BabyJhon 7': [1, 3, 2, 0, 1, 0, 5, 4, 0, 3],
    'Kalki 8': [0, 1, 3, 2, 0, 5, 4, 0, 1, 4],
    'Pushpa 9': [3, 0, 1, 4, 2, 0, 0, 5, 3, 1],
    'Sikandar 10': [2, 4, 0, 3, 0, 1, 3, 2, 0, 5]
}

# Create a DataFrame
ratings_df = pd.DataFrame(data)
ratings_df.set_index('User', inplace=True)

# Calculate the cosine similarity matrix
similarity_matrix = cosine_similarity(ratings_df.fillna(0))
similarity_df = pd.DataFrame(similarity_matrix, index=ratings_df.index, columns=ratings_df.index)

def get_recommendations(user, num_recommendations=2):
    # Get the similarity scores for the user
    user_similarities = similarity_df[user]

    # Get the user's ratings
    user_ratings = ratings_df.loc[user]

    # Calculate weighted scores for each movie
    weighted_scores = {}
    for other_user, similarity in user_similarities.items():
        if other_user != user:
            for movie, rating in ratings_df.loc[other_user].items():
                if rating > 0:  # Only consider rated movies
                    if movie not in weighted_scores:
                        weighted_scores[movie] = 0
                    weighted_scores[movie] += similarity * rating

    # Sort the movies by weighted scores
    recommended_movies = sorted(weighted_scores.items(), key=lambda x: x[1], reverse=True)

    # Return the top N recommendations
    return [movie for movie, score in recommended_movies[:num_recommendations]]

# Example usage
for user in ratings_df.index:
    recommendations = get_recommendations(user)
    print(f"Recommendations for {user}: {recommendations}")
